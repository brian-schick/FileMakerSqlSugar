/**
 * =====================================
 * @@.reserve ( value ; noQuote )
 *
 * PURPOSE:
 * 		Helper function for the main @() function.
 *		There is no need to call this function directly!
 * 		Detects whether the value is within the list of
 * 		SQL Reserved Words or contains an illegal SQL char.
 *
 * RETURNS:
 * 		(string) A SQL quoted version of the supplied value
 *
 * PARAMETERS:
 * 		value = supplied from calling function
 * 		noQuote = optional boolean toggle to enforce no quoting
 *
 * EXAMPLES:
 * 		@@.reserve ( "join"; 0)  // = "JOIN"
 * 		@@.reserve ( "join"; 1)  // = JOIN
 * 		@@.reserve ( "final price"; 0)  // = "final price"
 * 		@@.reserve ( "description"; 0)  // = description
 *
 * DEPENDENCIES:
 * 		none
 *
 * NOTE:
 * 		For better performance, we process values by a combination
 *		of their first letter and a 4-way split of the second letter.
 *		These are combined so that, for example, SQL keywords beginning with
 *		"A" are assigned ~switch of 0-3, those starting with "B" are 4-7, etc.
 *		This keeps the PatternCount expression lean, and greatly speeds execution.
 *
 * HISTORY:
 * 		Released on 2013-03-15 by Brian Schick (creator)
 *
 * REFERENCES:
 * 		none
 * =====================================
 */

Let ( [
	~val       = Upper ( Trim ( value ) ); // cleaned version of the inbound value
	~valLeft   = LeftWords ( ~val ; 1 );
	~isIllegal = Length ( Filter ( ~val ; " .|-*/<>,=~!^()'\"") )
				 or not Length ( Filter( Left ( ~valLeft ; 1 ) ; "ABCDEFGHIJKLMNOPQRSTUVWXYZ" ) );

	~l         = Code ( Left ( ~valLeft ; 1 ) ) - 65;
	~m         = Code ( Middle ( ~valLeft ; 2 ; 1 ) );
	~mval      = Case ( ~m < 70 ; 0 ; ~m < 77 ; 1 ; ~m < 83 ; 2 ; 3 ); // break on second letter at F,M,S
	~switch    = ~l * 4 + ~mval;
	~p         = "|" & ~valLeft & "|";

	~isReserved = Choose( ~switch ;
			// A
			PatternCount ( "|ABSOLUTE|ACTION|ADD|" ; ~p );
			PatternCount ( "|ALL|ALLOCATE|ALTER|" ; ~p );
			PatternCount ( "|AND|ANY|ARE|AS|ASC|ASSERTION|" ; ~p );
			PatternCount ( "|AT|AUTHORIZATION|AVG|" ; ~p );
			// B
			PatternCount ( "|BEGIN|BETWEEN|" ; ~p );
			PatternCount ( "|BINARY|BIT|BIT_LENGTH|BLOB|" ; ~p );
			PatternCount ( "|BOOLEAN|BOTH|" ; ~p );
			PatternCount ( "|BY|" ; ~p );
			// C
			PatternCount ( "|CASCADE|CASCADED|CASE|CAST|CATALOG|" ; ~p );
			PatternCount ( "|CHAPTER|CHAR|CHARACTER|CHARACTER_LENGTH|CHAR_LENGTH|CHECK|CHR|CLOSE|" ; ~p );
			PatternCount ( "|COALESCE|COLLATE|COLLATION|COLUMN|COMMIT|CONNECT|CONNECTION|CONSTRAINT|CONSTRAINTS|CONTINUE|CONVERT|CORRESPONDING|COUNT|CREATE|CROSS|" ; ~p );
			PatternCount ( "|CURDATE|CURRENT|CURRENT_DATE|CURRENT_TIME|CURRENT_TIMESTAMP|CURRENT_USER|CURSOR|CURTIME|CURTIMESTAMP|" ; ~p );
			// D
			PatternCount ( "|DATE|DATEVAL|DAY|DAYNAME|DAYOFWEEK|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFERRABLE|DEFERRED|DELETE|DESC|DESCRIBE|DESCRIPTOR|" ; ~p );
			PatternCount ( "|DIAGNOSTICS|DISCONNECT|DISTINCT|" ; ~p );
			PatternCount ( "|DOMAIN|DOUBLE|DROP|" ; ~p );
			0;
			// E
			0;
			PatternCount ( "|ELSE|" ; ~p );
			PatternCount ( "|END|END_EXEC|ESCAPE|" ; ~p );
			PatternCount ( "|EVERY|EXCEPT|EXCEPTION|EXEC|EXECUTE|EXISTS|EXTERNAL|EXTRACT|" ; ~p );
			// F
			PatternCount ( "|FALSE|FETCH|" ; ~p );
			PatternCount ( "|FIRST|FLOAT|" ; ~p );
			PatternCount ( "|FOR|FOREIGN|FOUND|FROM|" ; ~p );
			PatternCount ( "|FULL|" ; ~p );
			// G
			PatternCount ( "|GET|" ; ~p );
			PatternCount ( "|GLOBAL|" ; ~p );
			PatternCount ( "|GO|GOTO|GRANT|GROUP|" ; ~p );
			0;
			// H
			PatternCount ( "|HAVING|" ; ~p );
			0;
			PatternCount ( "|HOUR|" ; ~p );
			0;
			// I
			PatternCount ( "|IDENTITY|" ; ~p );
			0
			PatternCount ( "|IMMEDIATE|IN|INDEX|INDICATOR|INITIALLY|INNER|INPUT|INSENSITIVE|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|IS|ISOLATION|" ; ~p );
			0;
			// J
			0;
			0;
			PatternCount ( "|JOIN|" ; ~p );
			0;
			// K
			PatternCount ( "|KEY|" ; ~p );
			0;
			0;
			0;
			// L
			PatternCount ( "|LANGUAGE|LAST|LEADING|LEFT|LENGTH|LEVEL|" ; ~p );
			PatternCount ( "|LIKE|" ; ~p );
			PatternCount ( "|LOCAL|LONGVARBINARY|LOWER|" ; ~p );
			PatternCount ( "|LTRIM|" ; ~p );
			// M
			PatternCount ( "|MATCH|MAX|" ; ~p );
			PatternCount ( "|MIN|MINUTE|" ; ~p );
			PatternCount ( "|MODULE|MONTH|MONTHNAME|" ; ~p );
			0;
			// N
			PatternCount ( "|NAMES|NATIONAL|NATURAL|NCHAR|NEXT|" ; ~p );
			PatternCount ( "|NO|NOT|" ; ~p );
			0;
			PatternCount ( "|NULL|NULLIF|NUMERIC|NUMVAL|" ; ~p );
			// O
			PatternCount ( "|OCTET_LENGTH|" ; ~p );
			PatternCount ( "|OF|" ; ~p );
			PatternCount ( "|ON|ONLY|OPEN|OPTION|OR|ORDER|" ; ~p );
			PatternCount ( "|OUTER|OUTPUT|OVERLAPS|" ; ~p );
			// P
			PatternCount ( "|PAD|PART|PARTIAL|" ; ~p );
			0;
			PatternCount ( "|POSITION|PRECISION|PREPARE|PRESERVE|PRIMARY|PRIOR|PRIVILEGES|PROCEDURE|" ; ~p );
			PatternCount ( "|PUBLIC|" ; ~p );
			// Q
			0;
			0;
			0;
			0;
			// R
			PatternCount ( "|READ|REAL|REFERENCES|RELATIVE|RESTRICT|REVOKE|" ; ~p );
			PatternCount ( "|RIGHT|" ; ~p );
			PatternCount ( "|ROLLBACK|ROUND|ROWID|ROWS|" ; ~p );
			PatternCount ( "|RTRIM|" ; ~p );
			// S
			PatternCount ( "|SCHEMA|SCROLL|SECOND|SECTION|SELECT|SESSION|SESSION_USER|SET|" ; ~p );
			PatternCount ( "|SIZE|" ; ~p );
			PatternCount ( "|SMALLINT|SOME|SPACE|SQL|SQLCODE|SQLERROR|SQLSTATE|" ; ~p );
			PatternCount ( "|STANDARDS|STRVAL|SUBSTRING|SUM|SUPPORTED|SYSTEM_USER|" ; ~p );
			// T
			PatternCount ( "|TABLE|TEMPORARY|" ; ~p );
			PatternCount ( "|THEN|TIME|TIMESTAMP|TIMESTAMPVAL|TIMEVAL|TIMEZONE_HOUR|TIMEZONE_MINUTE|" ; ~p );
			PatternCount ( "|TO|TODAY|TRAILING|TRANSACTION|TRANSLATE|TRANSLATION|TRIM|TRUE|" ; ~p );
			0;
			// U
			0;
			0;
			PatternCount ( "|UNION|UNIQUE|UNKNOWN|UPDATE|UPPER|USAGE|USER|USERNAME|USING|" ; ~p );
			0;
			// V
			PatternCount ( "|VALUE|VALUES|VARBINARY|VARCHAR|VARYING|" ; ~p );
			PatternCount ( "|VIEW|" ; ~p );
			0;
			0;
			// W
			0;
			PatternCount ( "|WHEN|WHENEVER|WHERE|WITH|" ; ~p );
			PatternCount ( "|WORK|" ; ~p );
			PatternCount ( "|WRITE|" ; ~p );
			// X
			0;
			0;
			0;
			0;
			// Y
			PatternCount ( "|YEAR|" ; ~p );
			0;
			0;
			0;
			// Z
			0;
			0;
			PatternCount ( "|ZONE|" ; ~p );
			0
		)
];
	Case (
		noQuote and ~isReserved ;
			~val ;

		noQuote ;
			Lower ( ~val ) ;

		~isReserved or ~isIllegal ;
			"\"" & ~val & "\"" ;

		// default
		Lower ( ~val )
	)
)
