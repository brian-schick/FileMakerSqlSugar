//@@.help ( args )

Let (
	[
	cap = 999;
	arg = Trim ( Substitute ( args ; [ ¶; " " ] ; [ "    "; " " ] ; [ "   "; " " ] ; [ "  "; " " ] ) ) ;
	argLeft = LeftWords ( arg ; 1 );
	argRight = MiddleWords ( arg ; 2 ; cap )
	] ;

Case (

//true; argLeft & "|" & argRight ;    //debug

Left ( arg ; 1 ) = "i" ;  List (
	"AN INTRODUCTION TO @";
	"—————————————————————————————————————————————";
	"@ (pronounced " & Quote ("at") & ") is a FileMaker power SQL tool. @ is designed to help developers quickly craft robust, readable, elegant FileMaker SQL (FQL). For those new to SQL, Seed Code's excellent SQL Explorer is highly recommended. Think of @ as power steering: It won't steer your car for you, but it will help make driving more effortless and fun, and let you focus on the road instead the mechanics of driving.";
	" ";
	"@ is designed to focus on the building blocks of SQL queries: the fields, tables, values, and SQL operators that make up any SQL query. @ makes it easy to get, modify, and combine these query elements like LEGO blocks. This makes writing SQL queries light and flexible.";
	" ";
	"@ is simple to use, taking only 2 parameters, like this:";
	"@ ( objOrVal ; params )";
	" ";
	"@'s' initial " & Quote("objOrVal") & " parameter is overloaded, allowing it to take either a field object (myTable::myField) or a text, numeric, date, time, or timestamp value. (Basically, any object or value you might want in an FQL query).";
	" ";
	"@'s' second " & Quote("params") & " parameter takes a text string informing @ how to parse the object or value passed. Later, in the " & Quote("Chaining") & " section of help, we'll see that params is also overloaded, and the basic functionality we'll discuss here is just the tip of the iceberg. But first things first...";
	" ";
	"—————————————————————————————————————————————";
	"BASIC USE WITH OBJECTS:";
	" ";
	"@'s first and most important function is easing the task of referencing data objects in FileMaker SQL. In FQL this basic task presents a challenge: On one hand, fields and tables should always be wrapped in a GetFieldName() function to ensure that renaming tables or fields can't break our queries. But doing this creates a great deal of visual clutter, making queries difficult to create and even harder to read and maintain.";
	" ";
	"Out of the box, @ greatly simplifies this task, by providing a light, context-aware wrapper for objects. For example:";
	" ";
	"@ ( myTable::myField ; " & Quote("field") & " ) returns a SQL-formatted field reference:";
	"mytable.myfield";
	" ";
	"@ ( myTable::myField ; " & Quote("table") & " ) returns the SQL-standard:";
	"mytable";
	" ";
	"@ also compares each table and field referenced to reserved SQL keywords, and tests for multi-word names or other strings that while valid in FileMaker may not be valid SQL names. In any of these cases, @ will automatically double quote these object names, making them safe for use in FQL queries without any need for additional testing.";
	" ";
	"—————————————————————————————————————————————";
	"BASIC USE WITH VALUES";
	" ";
	"@ makes it as easy to reference values as data objects. Even better, @'s syntax is completely parallel for both object and value use.  In the case of values, @'s overloaded objOrVal parameter accepts the value, and its params arg now takes an initial argument to inform @ how the value received is to be treated. Some examples:";
	" ";
	"Text and numeric values are treated like this:";
	" ";
	"@ ( " & Quote("hello 123") & " ; " & Quote("text") & " )";
	"--returns 'hello 123'. Note that @ automatically places single quotes around text values, making them ready for direct use in SQL queries.";
	" ";
	"@ ( " & Quote("hello 123") & " ; " & Quote("number") & " )";
	"--evaluates to 123. When handling numberic values, @ automatically casts the value as a number (in this example, retrieving only the numeric portion of the string passed). Numeric values are correctly returned without quotation, ready for evaluation in SQL expressions.";
	" ";
	"Date, time, and timestamp values can also be extracted as desired. As with numeric values, @ casts these and retrieves the requested portion of the value received. By default, these are retuned in native FileMaker format:";
	" ";
	"@ ( Get ( CurrentTimestamp ) ; " & Quote("timestamp") & " )";
	"--returns a single-quoted timestamp value in FileMaker-native format, such as '3/10/2013 6:15:42 PM' ";
	" ";
	"@ ( Get ( CurrentTimestamp ) ; " & Quote("time") & " )";
	"--extracts and returns the single-quoted time portion of this value in FileMaker format, such as '6:15:42 PM' ";
	" ";
	"@ ( Get ( CurrentTimestamp ) ; " & Quote("date") & " )";
	"--returns a single-quoted date value in FileMaker format, such as '3/10/2013' ";
	" ";
	"@ also makes it easy to cast date, time, and timestamp values in SQL-standard format. To do this, simply append 'SQL' to any of these operators. For example:";
	" ";
	"@ ( Get ( CurrentTimestamp ) ; " & Quote("timestampSQL") & " )";
	"--returns a single-quoted SQL ANSI timestamp, such as '2013-03-10 18:21:35'.";
	" ";
	"—————————————————————————————————————————————";
	"SYNTACTIC SUGAR FOR OBJECTS";
	" ";
	"@ doesn't try to impose a specific style of SQL on developers; in fact, it does everything it can to empower developers to choose whatever style and form that best suits their own approach. One place this is evident is @'s use of synonyms and shortened forms. For objects:";
	" ";
	"@ ( <tbl::fld> ; " & Quote("table") & " ) can be shortened to:";
	"@ ( <tbl::fld> ; " & Quote("tbl") & " ) or simply ";
	"@ ( <tbl::fld> ; " & Quote("t") & " )";
	" ";
	"@ ( <tbl::fld> ; " & Quote("field") & " ) can be shortened to:";
	"@ ( <tbl::fld> ; " & Quote("fld") & " ) or ";
	"@ ( <tbl::fld> ; " & Quote("f") & " )";
	" ";
	"As a synynom for field, @ understands use of the more common SQL term " & Quote("column") & ":";
	" ";
	"@ ( <tbl::fld> ; " & Quote("column") & " ) ";
	"@ ( <tbl::fld> ; " & Quote("col") & " ) ";
	"@ ( <tbl::fld> ; " & Quote("c") & " )";
	" ";
	"Maybe nicest of all, if the params string is empty, @ will cast the object as a field. This allows a very compact form:";
	" ";
	"@ ( <tbl::fld> ; " & Quote("") & " )";
	" ";
	"—————————————————————————————————————————————";
	"SYNTACTIC SUGAR FOR VALUES";
	" ";
	"@ brings this same approach to values. For values, standard type parameters can be shortened by using the FileMaker field type equivalent:";
	" ";
	"@ ( <val> ; " & Quote("text") & " )   =>   @ ( <val> ; " & Quote("t") & " )";
	"@ ( <val> ; " & Quote("number") & " )  =>  @ ( <val> ; " & Quote("n") & " )";
	" ";
	"@ ( <val> ; " & Quote("timestamp") & " )  =>  @ ( <val> ; " & Quote("m") & " )";
	"@ ( <val> ; " & Quote("time") & " )  =>  @ ( <val> ; " & Quote("i") & " )";
	"@ ( <val> ; " & Quote("date") & " )  =>  @ ( <val> ; " & Quote("d") & " )";
	" ";
	"The SQL-formatted variants may also be shortened by appending SQL to FileMaker data type. For example:";
	" ";
	"@ ( <val> ; " & Quote("timestampSQL") & " )  =>  @ ( <val> ; " & Quote("mSQL") & " )";
	" ";
	"If params is left empty, @ will treat the value as a text string.";
	" ";
	"—————————————————————————————————————————————";
	"SUMMARY SO FAR";
	" ";
	"In general, the longer forms of these parameters may be most useful for many developers as they are learning @. Over time, the shorter forms and synonyms may prove useful to many developers as they gain familiarity with @. These can be especially helpful in compacting and focusing queries to a core essence that clearly exposes its structure and meaning.";
	" ";
	"The next section describes the use of @'s advanced chaining features, which build on the basic functions described in this section. To view this section, enter:";
	" ";
	"@ ( \"\"; \"? chaining\" )";
	" ";
	"—————————————————————————————————————————————";
"");


Left ( arg ; 1 ) = "c" ;  List (
	"CHAINING @ PARAMETERS";
	"—————————————————————————————————————————————";
	"@ features a powerful chainable syntax. While atypical in the FileMaker world, this approach is powerful, light, and extensive. This ability to overload the params parameter lies at the heart of @'s advanced capabilities.";
	" ";
	"As outlined earlier, the initial argument of  params  informs @ how the object or value passed is to be handled. Beyond this, any number of space-separated arguments may be added to create compact, meta SQL statements. As a quick intro, here are a couple of simple examples:";
	" ";
	"@ ( <object> ; \"field lower()\")";
	"- retrieves the field name from the object passed and wraps it in a SQL LOWER() function";
	" ";
	"@ ( <object> ; \"table inner join >> as:t on\")";
	"- wraps the table name in the the string \"INNER JOIN <table> AS t ON";
	" ";
	"—————————————————————————————————————————————";
	"CHAINING BASICS:";
	" ";
	"@ recognizes that as we construct SQL queries, we typically want to accomplish 3 tasks:";
	" ";
	"- preface query objects (fields, tables, or values) with SQL operators, string literals, delimiters, or spacers";
	" ";
	"- append operators, string literals, delimiters, or spacers after a query object";
	" ";
	"- wrap query objects in one of more SQL functions";
	" ";
	"@'s chainable syntax makes it easy to do any combination of these things inline. @'s basic chaining rules are:";
	" ";
	"- By default, \"words\" in a params argument are cast to the left of a query object. For example, @ ( <object> ; \"table inner join\") places the words \"INNER \" and \"JOIN\" to the left of the table name it extracts.";
	" ";
	"-  When the shift operator (>>) is present, words following it are placed to the right of a query object. For example, @ ( <object> ; \"table >> left join\") will place  \"INNER JOIN\" to the right of the extracted table name ";
	" ";
	"- SQL functions are denoted by parens \"()\". These will automatically wrap a query object. For example, @ ( <object> ; \"field trim()\") will wrap the extracted field name in a SQL TRIM () function";
	" ";
	"—————————————————————————————————————————————";
	"THE DOT SHORTHAND:";
	" ";
	"Because a query will invoke @ many times, even small savings in redundant syntax can make a big different in the readability of a query. Therefore, @ provides several tools to help developers hone query snippets to their simplest, most readable form. One example of this is the dot shorthand, which allows castings of objects or strings as their default type in the simplest way possible. For example, ";
	" " ;
	"@ ( <object> ; \"field trim()\") may be shortened to ";
	"@ ( <object> ; \". trim()\")  ";
	" ";
	"—————————————————————————————————————————————";
	"SPACERS AND DELIMITERS:";
	" ";
	"As queries become more sophisticated, it becomes increasingly important that they be carefully and cleanly formatted. To aid in this, @ provides a spacer shorthand (\"_\") and a delimiter shorthand (\",\"). So, for example::";
	" " ;
	"@ ( <object> ; \". , _\" ) evaluates to:";
	"\",   <fieldname>\"";
	" ";
	"—————————————————————————————————————————————";
	"FUNCTION CHAINING:";
	" ";
	"It's often useful to combine multiple functions in combination in a query snippet. @ makes this very easy to do, and allows 2 syntaxes:";
	"@ ( <object> ; \". lower() trim()\") and";
	"@ ( <object> ; \". lower(trim())\") will both evaluate to:";
	"LOWER ( TRIM ( <fieldname> ) )";
	" ";
	"—————————————————————————————————————————————";
	"COMPLEX FUNCTIONS:";
	" ";
	"Most SQL functions are simply, like LOWER() and TRIM(), but some, like CAST() and SUBSTRING() require one or more additional parameters. @ makes this easy as well:";
	" ";
	"@ ( <object> ; \". substring(:2:4\") will evaluate to:";
	"\"SUBSTRING ( <fieldname> , 2 , 4 )\"";
	" ";
	"@ recognizes  either \":\" or \"|\ as the parameter separator."  ;
	" ";
	"—————————————————————————————————————————————";
	"BUT WHAT DOES IT MEAN?";
	" ";
	"If this seems abstract, don't worry. The next section contains several examples of snippets and complete queries that should make things clearer. To see this, run: @ ( \"\"; \"? sample";
	" ";
	"—————————————————————————————————————————————";
"");


Left ( arg ; 1 ) = "s" ;  List (
	"SAMPLES OF @ USAGE";
	"—————————————————————————————————————————————";

	"—————————————————————————————————————————————";
"");


Left ( arg  ; 1 ) = "a" ;  List (
	"CREDITS";
	"—————————————————————————————————————————————";
	"Author:  Brian Schick.";
	"Thanks:  Vincenzo Menanno, Jay Gonzales, Todd Geist";
	" ";
	"COPYRIGHT AND TERMS OF USE";
	"—————————————————————————————————————————————";
	"Copyright 2013, Brian Schick, Beezwax Datatools, Inc." ;
	" ";
	"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the " & Quote ( "Software" ) & "), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:";
	" ";
	"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.";
	" ";
	"THE SOFTWARE IS PROVIDED " & Quote ( "AS IS" ) & ", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.";
	"—————————————————————————————————————————————";
"");


Left ( arg ; 1 ) = "v" ;  List (
	"VERSION INFO";
	"—————————————————————————————————————————————";
	"Version:  0.6     Date:  18 March 2013";
	"Summary:  First beta version released for initial testing";
	" ";
	"New Features:";
	"- Added improved natural language nesting of chained functions";
	"- Added inline help and documentation";
	"- Improved @ performance (streamlined use of GetFieldName() )";
	"- Improved helper function names";
	" ";
	"Bug Fixes:";
	"- Resolved errors with nested functions";
	"- Resolves issues with multiple parameter SQL functions";
	"- Resolved alias parsing errors";
	" ";
	" ";
	"VERSION HISTORY";
	"—————————————————————————————————————————————";
	"Version:  0.5     Date:  5 March 2013";
	"Summary: Initlal alpha shown at POE Portland 2013. Not released.";
	" ";
	"—————————————————————————————————————————————";
"");


Left ( arg  ; 1 ) = "q" ;  List (
	"THE @.SQLQUERY WRAPPER FUNCTION";
	"—————————————————————————————————————————————";
	"Overview:";
	"The @.sqlQuery function is an optional wrapper function for FQL queries. It simplifies and cleans queries, and adds query-level parsing.";
	" ";
	"Signature:";
	"@.sqlQuery ( <sqlQuery> )";
	" ";
	"Details:";
	"@.sqlQuery performs 3 query-level functions:";
	" ";
	"- Pads and normalizes white space for better presentation.";
	" ";
	"- Analyzes the sqlQuery passed to determine if it is simple (contains just one table in its FROM clause and has no nested clauses). If so, It simplifies the query by removing unneeded <table.> prefixes throughout the query. ";
	" ";
	"- Scans queries for table aliases wrapped by upstream @ calls. If found, these are unpacked, and the alias replaces the raw table name throughout the query.";
	"—————————————————————————————————————————————";
"");


Left ( arg ; 3 ) = "e" ;  List (
	"THE @.SQLEXECUTE PROXY FUNCTION";
	"—————————————————————————————————————————————";
	" ";
	"Not yet implemented in this version." ;
	" ";
	"This will provide a lightweight wrapper function executing SQL queries. In addition to fully supporting the native ExecuteSQL() function, this will add the following features:";
	" ";
	"- Switch dynamically between the native FileMaker 12 SQL function and any of several popular SQL plugins. Among other benefits, this will enable developers to use extended features of the SQL DDL to perform INSERT, UPDATE, and DELETE queries.";
	" ";
	"- Optionally include Column titles. This will automatically detect column aliases used in the SQL query.";
	" ";
	"- Cast results as HTML tables, with or without column title. This will enable display of results directly in a web viewer.";
	"—————————————————————————————————————————————";
"");


PatternCount ( argLeft ; "f" ) and Left ( argRight ; 1 )  = "n";  List (
	"FQL NUMBER FUNCTIONS";
	"—————————————————————————————————————————————";

	"—————————————————————————————————————————————";
"");


PatternCount ( argLeft ; "f" ) and
	( Left ( argRight ; 1 )  = "d" or Left ( argRight ; 2 )  = "ti" ) ;  List (
	"FQL DATE, TIME, AND TIMESTAMP FUNCTIONS";
	"—————————————————————————————————————————————";

	"—————————————————————————————————————————————";
"");


PatternCount ( argLeft ; "f" ) and Left ( argRight ; 1 )  = "t";  List (
	"FQL TEXT FUNCTIONS";
	"—————————————————————————————————————————————";

	"—————————————————————————————————————————————";
"");


PatternCount ( argLeft ; "f" ) and Left ( argRight ; 1 )  = "m";  List (
	"FQL META AND CONVERSION FUNCTIONS";
	"—————————————————————————————————————————————";

	"—————————————————————————————————————————————";
"");

PatternCount ( argLeft ; "f" ) ;  List (
	"A BRIEF OVERVIEW OF FILEMAKER SQL (FQL)";
	"—————————————————————————————————————————————";

	"—————————————————————————————————————————————";
"");


List (
	"WELCOME TO @: FILEMAKER SQL SUGAR!";
	"—————————————————————————————————————————————";
	"@ offers contextual help. These commands are available:";
	" ";
	"- @ ( \"\"; \"?\" ) » general help (this screen)";
	"- @ ( \"\"; \"? intro\" ) » an intro to @'s core functions";
	"- @ ( \"\"; \"? chaining\" ) » how to use @'s chainable syntax";
	"- @ ( \"\"; \"? sample\" ) » sample @ usage";
	"- @ ( \"\"; \"? about\" ) » credits & terms of use";
	"- @ ( \"\"; \"? version\" ) » version number and history";
	"- @ ( \"\"; \"? query\" ) » the @.sqlQuery wrapper function";
	"- @ ( \"\"; \"? execute\" ) » the @ sqlExecute proxy function";
	" ";
	"- @ ( \"\"; \"? fql intro\" ) » an intro to FileMaker's SQL dialect";
	"- @ ( \"\"; \"? fql number\" ) » info about FQL number functions";
	"- @ ( \"\"; \"? fql date\" ) »  FQL date/time/timestamp functions";
	"- @ ( \"\"; \"? fql text\" ) »  FQL text/string functions";
	"- @ ( \"\"; \"? fql meta\" ) » FQL casting and meta functions";
	" ";
	"Basic help commands may be shortened to their first letter.";
	"For example:  @ ( \"\"; \"? c\" ) will display chainable syntax help.";
	" ";
	"FQL help may be shortened to " & Quote ( "fql" ) & " plus the first letter.";
	"For example:  @ ( \"\"; \"? fql n\" ) shows FQL number function help." ;
	"—————————————————————————————————————————————";
"")

)
)

/*・・・・・・・・・・・・・・・・・・・・・・・・
Copyright (c) Brian Schick, 2013.
For help, inline tutorial, and open source license info, call this function itself, lke so:
@ ( "" ; "?" )
・・・・・・・・・・・・・・・・・・・・・・・・*/
