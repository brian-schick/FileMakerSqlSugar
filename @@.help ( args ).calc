//@@.help ( args )

Let (
	[
	cap = 999;
	arg = Trim ( Substitute ( args ; [ ¶; " " ] ; [ "    "; " " ] ; [ "   "; " " ] ; [ "  "; " " ] ) ) ;
	argLeft = LeftWords ( arg ; 1 );
	argRight = MiddleWords ( arg ; 2 ; cap )
	] ;

Case (

//true; argLeft & "|" & argRight ;    //debug

Left ( arg ; 1 ) = "i" ;  List (
	"AN INTRODUCTION TO @";
	"—————————————————————————————————————————————";
	"@ (pronounced " & Quote ("at") & ") is a FileMaker developer's tool for quickly creating clean, resilient FileMaker SQL (FQL). For those new to SQL, Seed Code's excellent SQL Explorer is highly recommended. Think of @ as power steering: It won't drive your car for you, but once you can drive, it makes driving simpler, safer, and more fun.";
	" ";
	"@'s signature is:  @ ( objOrVal ; params )";
	" ";
	"The initial " & Quote("objOrVal") & " parameter accepts either a field object (myTable::myField) or a text, numeric, date, time, or timestamp value.";
	" ";
	"The second " & Quote("params") & " parameter takes (at minimum) a simple string informing @ how to parse the object or value passed. In addition, it allows additional operators, functions, and literals to be added in a chainable format. These are discussed in the " & Quote("Chaining") & " section of help.";
	" ";
	"—————————————————————————————————————————————";
	"BASIC USE WITH OBJECTS:";
	" ";
	"A significant challenge in writing FQL is the need to wrap all data objects within GetFieldName() and then parse this, so that queries won't break as field or table names change. Out of the box, @ greatly simplifies this task. For example, to reference a field or table in a query, enter:";
	" ";
	"@ ( myTable::myField ; " & Quote("field") & " ), or";
	"@ ( myTable::myField ; " & Quote("table") & " ) ";
	" ";
	"@ will automatically parse tables and fields in lowercase SQL dot format. In addition, it will detect SQL reserved words, table and field names not valid in SQL, and multiple word names. These will automatically be escaped in double quotes, enabling them to be used safely in FQL queries.";
	" ";
	"—————————————————————————————————————————————";
	"BASIC USE WITH VALUES";
	" ";
	"@ also provides several tools out of the box to ease the use of values directly in FQL queries.  As before, the second parameter is used to inform @ how to treat the value received. For example, text and number values are treated like this:";
	" ";
	"@ ( " & Quote("hello 123") & " ; " & Quote("text") & " )";
	"- returns 'hello 123'. @ automatically single quotes text values, as SQL requires.";
	" ";
	"@ ( " & Quote("hello 123") & " ; " & Quote("number") & " )";
	"- evaluates to 123. @ automatically casts the value as a number, returning it without quotes, again per SQL specs.";
	" ";
	"Date, time, and timestamp values can also be extracted as desired. By default, they are retuned in native FileMaker format:";
	" ";
	"@ ( Get ( CurrentTimestamp ) ; " & Quote("timestamp") & " )";
	"- returns a single-quoted timestamp value in FileMaker-native format, such as '3/10/2013 6:15:42 PM' ";
	" ";
	"@ ( Get ( CurrentTimestamp ) ; " & Quote("time") & " )";
	"- extracts and returns the single-quoted time portion of this value, again in FileMaker-native format, such as '6:15:42 PM' ";
	" ";
	"@ ( Get ( CurrentTimestamp ) ; " & Quote("date") & " )";
	"- returns a single-quoted date value in FileMaker-native format, such as '3/10/2013' ";
	" ";
	"To cast these values in SQL-standard format, simply append 'SQL' to any of these operators. For example:";
	" ";
	"@ ( Get ( CurrentTimestamp ) ; " & Quote("timestampSQL") & " )";
	"- returns a single-quoted SQL ANSI timestamp, such as '2013-03-10 18:20:00'. This can be done similarly for date and time values. ";
	" ";
	"—————————————————————————————————————————————";
	"SYNTACTIC SUGAR";
	" ";
	"In the spirit of Ruby, Markdown, and JavaScript meta languages, @ does everything it can to empower developers to choose the style and form best suited to their own approach. One place this is evident is @'s use of synonyms and shortened forms. For objects:";
	" ";
	"@ ( ... ; " & Quote("table") & " ) can be shortened to:";
	"@ ( ... ; " & Quote("tbl") & " ) or simply @ ( ... ; " & Quote("t") & " )";
	" ";
	"@ ( ... ; " & Quote("field") & " ) can be shortened to:";
	"@ ( ... ; " & Quote("fld") & " ) or @ ( ...; " & Quote("f") & " )";
	" ";
	"Developers are free to choose the more common SQL term " & Quote("column") & " or its shortened forms, " & Quote("col") & " or " & Quote("c") & ". Also, if no argument is passed, objects are cast as fields by default, enabling the field argument to be completely omitted if desired.";
	" ";
	"For values, standard type parameters can be shortened by using the FileMaker field type equivalent. For example:";
	" ";
	"@ ( ... ; " & Quote("text") & " )   =>   @ ( ... ; " & Quote("t") & " )";
	"@ ( ... ; " & Quote("number") & " )  =>  @ ( ... ; " & Quote("n") & " )";
	" ";
	"@ ( ... ; " & Quote("timestamp") & " )  =>  @ ( ... ; " & Quote("m") & " )";
	"@ ( ... ; " & Quote("time") & " )  =>  @ ( ... ; " & Quote("i") & " )";
	"@ ( ... ; " & Quote("date") & " )  =>  @ ( ... ; " & Quote("d") & " )";
	" ";
	"The SQL-formatted variants may also be shortened by appending SQL to FileMaker data type. For example:";
	" ";
	"@ ( ... ; " & Quote("timestampSQL") & " )  =>  @ ( ... ; " & Quote("mSQL") & " )";
	" ";
	"In general, the longer forms of these parameters may be most useful for many developers as they are learning @. However, the shorter forms and synonyms may prove useful to many developers as they gain familiarity with @. In particular, the shorter forms can be helpful in compacting and focusing queries down to a core essence.";
	" ";
	"To proceed to the next topic, please enter";
	" ";
	"- @ ( \"\"; \"? chaining\" ) » how to use @'s chainable syntax";
	" ";
	"—————————————————————————————————————————————";
"");


Left ( arg ; 1 ) = "c" ;  List (
	"CHAINING @ PARAMETERS";
	"—————————————————————————————————————————————";
	"@ features a powerful chainable syntax. While atypical in the FileMaker world, this approach is powerful, light, and extensive. This ability to overload the params parameter lies at the heart of @'s advanced capabilities.";
	" ";
	"As outlined earlier, the initial argument of  params  informs @ how the object or value passed is to be handled. Beyond this, any number of space-separated arguments may be added to create compact, meta SQL statements. As a quick intro, here are a couple of simple examples:";
	" ";
	"@ ( <object> ; \"field lower()\")";
	"- retrieves the field name from the object passed and wraps it in a SQL LOWER() function";
	" ";
	"@ ( <object> ; \"table inner join >> as:t on\")";
	"- wraps the table name in the the string \"INNER JOIN <table> AS t ON";
	" ";
	"—————————————————————————————————————————————";
	"CHAINING BASICS:";
	" ";
	"@ recognizes that as we construct SQL queries, we typically want to accomplish 3 tasks:";
	" ";
	"- preface query objects (fields, tables, or values) with SQL operators, string literals, delimiters, or spacers";
	" ";
	"- append operators, string literals, delimiters, or spacers after a query object";
	" ";
	"- wrap query objects in one of more SQL functions";
	" ";
	"@'s chainable syntax makes it easy to do any combination of these things inline. @'s basic chaining rules are:";
	" ";
	"- By default, \"words\" in a params argument are cast to the left of a query object. For example, @ ( <object> ; \"table inner join\") places the words \"INNER \" and \"JOIN\" to the left of the table name it extracts.";
	" ";
	"-  When the shift operator (>>) is present, words following it are placed to the right of a query object. For example, @ ( <object> ; \"table >> left join\") will place  \"INNER JOIN\" to the right of the extracted table name ";
	" ";
	"- SQL functions are denoted by parens \"()\". These will automatically wrap a query object. For example, @ ( <object> ; \"field trim()\") will wrap the extracted field name in a SQL TRIM () function";
	" ";
	"—————————————————————————————————————————————";
	"THE DOT SHORTHAND:";
	" ";
	"Because a query will invoke @ many times, even small savings in redundant syntax can make a big different in the readability of a query. Therefore, @ provides several tools to help developers hone query snippets to their simplest, most readable form. One example of this is the dot shorthand, which allows castings of objects or strings as their default type in the simplest way possible. For example, ";
	" " ;
	"@ ( <object> ; \"field trim()\") may be shortened to ";
	"@ ( <object> ; \". trim()\")  ";
	" ";
	"—————————————————————————————————————————————";
	"SPACERS AND DELIMITERS:";
	" ";
	"As queries become more sophisticated, it becomes increasingly important that they be carefully and cleanly formatted. To aid in this, @ provides a spacer shorthand (\"_\") and a delimiter shorthand (\",\"). So, for example::";
	" " ;
	"@ ( <object> ; \". , _\" ) evaluates to:";
	"\",   <fieldname>\"";
	" ";
	"—————————————————————————————————————————————";
	"FUNCTION CHAINING:";
	" ";
	"It's often useful to combine multiple functions in combination in a query snippet. @ makes this very easy to do, and allows 2 syntaxes:";
	"@ ( <object> ; \". lower() trim()\") and";
	"@ ( <object> ; \". lower(trim())\") will both evaluate to:";
	"LOWER ( TRIM ( <fieldname> ) )";
	" ";
	"—————————————————————————————————————————————";
	"COMPLEX FUNCTIONS:";
	" ";
	"Most SQL functions are simply, like LOWER() and TRIM(), but some, like CAST() and SUBSTRING() require one or more additional parameters. @ makes this easy as well:";
	" ";
	"@ ( <object> ; \". substring(:2:4\") will evaluate to:";
	"\"SUBSTRING ( <fieldname> , 2 , 4 )\"";
	" ";
	"@ recognizes  either \":\" or \"|\ as the parameter separator."  ;
	" ";
	"—————————————————————————————————————————————";
	"BUT WHAT DOES IT MEAN?";
	" ";
	"If this seems abstract, don't worry. The next section contains several examples of snippets and complete queries that should make things clearer. To see this, run: @ ( \"\"; \"? sample";
	" ";
	"—————————————————————————————————————————————";
"");


Left ( arg ; 1 ) = "s" ;  List (
	"SAMPLES OF @ USAGE";
	"—————————————————————————————————————————————";

	"—————————————————————————————————————————————";
"");


Left ( arg  ; 1 ) = "a" ;  List (
	"CREDITS";
	"—————————————————————————————————————————————";
	"Author:  Brian Schick.";
	"Thanks:  Vincenzo Menanno, Jay Gonzales, Todd Geist";
	" ";
	"COPYRIGHT AND TERMS OF USE";
	"—————————————————————————————————————————————";
	"Copyright 2013, Brian Schick, Beezwax Datatools, Inc." ;
	" ";
	"Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the " & Quote ( "Software" ) & "), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:";
	" ";
	"The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.";
	" ";
	"THE SOFTWARE IS PROVIDED " & Quote ( "AS IS" ) & ", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.";
	"—————————————————————————————————————————————";
"");


Left ( arg ; 1 ) = "v" ;  List (
	"VERSION INFO";
	"—————————————————————————————————————————————";
	"Version:  0.6     Date:  18 March 2013";
	"Summary:  First beta version released for initial testing";
	" ";
	"New Features:";
	"- Added improved natural language nesting of chained functions";
	"- Added inline help and documentation";
	"- Improved @ performance (streamlined use of GetFieldName() )";
	"- Improved helper function names";
	" ";
	"Bug Fixes:";
	"- Resolved errors with nested functions";
	"- Resolves issues with multiple parameter SQL functions";
	"- Resolved alias parsing errors";
	" ";
	" ";
	"VERSION HISTORY";
	"—————————————————————————————————————————————";
	"Version:  0.5     Date:  5 March 2013";
	"Summary: Initlal alpha shown at POE Portland 2013. Not released.";
	" ";
	"—————————————————————————————————————————————";
"");


Left ( arg  ; 1 ) = "q" ;  List (
	"THE @.SQLQUERY WRAPPER FUNCTION";
	"—————————————————————————————————————————————";
	"Overview:";
	"The @.sqlQuery function is an optional wrapper function for FQL queries. It simplifies and cleans queries, and adds query-level parsing.";
	" ";
	"Signature:";
	"@.sqlQuery ( <sqlQuery> )";
	" ";
	"Details:";
	"@.sqlQuery performs 3 query-level functions:";
	" ";
	"- Pads and normalizes white space for better presentation.";
	" ";
	"- Analyzes the sqlQuery passed to determine if it is simple (contains just one table in its FROM clause and has no nested clauses). If so, It simplifies the query by removing unneeded <table.> prefixes throughout the query. ";
	" ";
	"- Scans queries for table aliases wrapped by upstream @ calls. If found, these are unpacked, and the alias replaces the raw table name throughout the query.";
	"—————————————————————————————————————————————";
"");


Left ( arg ; 3 ) = "e" ;  List (
	"THE @.SQLEXECUTE PROXY FUNCTION";
	"—————————————————————————————————————————————";
	" ";
	"Not yet implemented in this version." ;
	" ";
	"This will provide a lightweight wrapper function executing SQL queries. In addition to fully supporting the native ExecuteSQL() function, this will add the following features:";
	" ";
	"- Switch dynamically between the native FileMaker 12 SQL function and any of several popular SQL plugins. Among other benefits, this will enable developers to use extended features of the SQL DDL to perform INSERT, UPDATE, and DELETE queries.";
	" ";
	"- Optionally include Column titles. This will automatically detect column aliases used in the SQL query.";
	" ";
	"- Cast results as HTML tables, with or without column title. This will enable display of results directly in a web viewer.";
	"—————————————————————————————————————————————";
"");


PatternCount ( argLeft ; "f" ) and Left ( argRight ; 1 )  = "n";  List (
	"FQL NUMBER FUNCTIONS";
	"—————————————————————————————————————————————";

	"—————————————————————————————————————————————";
"");


PatternCount ( argLeft ; "f" ) and
	( Left ( argRight ; 1 )  = "d" or Left ( argRight ; 2 )  = "ti" ) ;  List (
	"FQL DATE, TIME, AND TIMESTAMP FUNCTIONS";
	"—————————————————————————————————————————————";

	"—————————————————————————————————————————————";
"");


PatternCount ( argLeft ; "f" ) and Left ( argRight ; 1 )  = "t";  List (
	"FQL TEXT FUNCTIONS";
	"—————————————————————————————————————————————";

	"—————————————————————————————————————————————";
"");


PatternCount ( argLeft ; "f" ) and Left ( argRight ; 1 )  = "m";  List (
	"FQL META AND CONVERSION FUNCTIONS";
	"—————————————————————————————————————————————";

	"—————————————————————————————————————————————";
"");

PatternCount ( argLeft ; "f" ) ;  List (
	"A BRIEF OVERVIEW OF FILEMAKER SQL (FQL)";
	"—————————————————————————————————————————————";

	"—————————————————————————————————————————————";
"");


List (
	"WELCOME TO @: FILEMAKER SQL SUGAR!";
	"—————————————————————————————————————————————";
	"@ offers contextual help. These commands are available:";
	" ";
	"- @ ( \"\"; \"?\" ) » general help (this screen)";
	"- @ ( \"\"; \"? intro\" ) » an intro to @'s core functions";
	"- @ ( \"\"; \"? chaining\" ) » how to use @'s chainable syntax";
	"- @ ( \"\"; \"? sample\" ) » sample @ usage";
	"- @ ( \"\"; \"? about\" ) » credits & terms of use";
	"- @ ( \"\"; \"? version\" ) » version number and history";
	"- @ ( \"\"; \"? query\" ) » the @.sqlQuery wrapper function";
	"- @ ( \"\"; \"? execute\" ) » the @ sqlExecute proxy function";
	" ";
	"- Any command can be shortened to the first letter of any command";
	"   (for example:  @ ( \"\"; \"? i\" ) " ;
	" ";
	"- @ ( \"\"; \"? fql intro\" ) » an intro to FileMaker's SQL dialect";
	"- @ ( \"\"; \"? fql number\" ) » info about FQL number functions";
	"- @ ( \"\"; \"? fql date\" ) »  FQL date/time/timestamp functions";
	"- @ ( \"\"; \"? fql text\" ) »  FQL text/string functions";
	"- @ ( \"\"; \"? fql meta\" ) » FQL casting and meta functions";
	" ";
	"- These can also be shortened to " & Quote ( "fql" ) & " and a single letter";
	"—————————————————————————————————————————————";
"")

)
)

/*・・・・・・・・・・・・・・・・・・・・・・・・
Copyright (c) Brian Schick, 2013.
For help, inline tutorial, and open source license info, call this function itself, lke so:
@ ( "" ; "?" )
・・・・・・・・・・・・・・・・・・・・・・・・*/
